import type { Metadata } from "next";
import "./globals.css";
import { ReactQueryClientProvider } from "@/providers/QueryProvider";
import ChatContextProvider from "@/context/ChatContext/ChatContextProvider";
import { notFound } from "next/navigation";
import IntlPolyfills from "@/components/IntlPolyfills";
import { ReactNode } from "react";
import { NextIntlClientProvider } from "next-intl";
import dynamic from "next/dynamic";
import NextThemeProvider from "@/providers/NextThemeProvider";
import ToastProvider from "@/providers/ToastProvider";

export const metadata: Metadata = {
  title: "Chat Application",
  description: "Generated by Chat Application",
};
const locales = [
  "english",
  "bangla",
  "canada",
  "china",
  "france",
  "germany",
  "india",
  "japan",
  "russia",
];
export function generateStaticParams() {
  return locales.map((locale) => ({ locale }));
}
export default async function LocaleLayout({
  children,
  params: { locale },
}: {
  children: ReactNode;
  params: { locale: string };
}) {
  let languages;

  try {
    languages = (await import(`../../languages/${locale}.json` as string)).default;
  } catch (error) {
    notFound();
  }
  return (
    <html lang={locale} suppressHydrationWarning>
      {/* {locale} */}
      <ReactQueryClientProvider>
        <ChatContextProvider>
          <body>
            {" "}
            <NextThemeProvider>
              <NextIntlClientProvider locale={locale} messages={languages}>
                <ToastProvider>{children} </ToastProvider>
                {/* <IntlPolyfills /> */}
              </NextIntlClientProvider>
            </NextThemeProvider>
          </body>
        </ChatContextProvider>
      </ReactQueryClientProvider>
    </html>
  );
}
